JOUR 1 :
    
    JOB 1 :
        Objectif : Avoir un projet Spring Boot prêt à être importé dans votre IDE.

        Question : Qu'est-ce que Spring Initializr et comment peut-il faciliter la
        création d'un nouveau projet Spring?
        
        Réponse : Spring Initializr est un outil intégré au web servant à faciliter l'
        initialization d'un projet Java Spring Boot.
        Il facilite la création d'un nouveau projet Spring en demandant à l'utilisateur uniquement
        les propriétés les plus importantes pour un projet Spring Boot et s'occupe de lui générer un .zip
        contenant tout ce que l'utilisateur a besoin, automatisant la configuration d'un projet, son squelette,
        augmentant considérablement la productivité des développeurs au sein d'un projet. Ils n'ont plus qu'à se 
        focaliser sur le code, et pas toutes les propriétés de Maven, Java, les dépendances etc...
    
    JOB 2 :
        Objectif : Comprendre la structure de base d'un projet Spring Boot.

        Question : Pourquoi le fichier pom.xml est-il crucial dans un projet Maven ?

        Réponse : Le fichier pom.xml est crucial dans un projet Maven car il est le fichier principal de celui-ci.
                  C'est lui qui :
                  -gère les dépendences
                  -dit à Maven comment compiler, tester, package, installer et déployer une application avec un cycle de vie prédéfini.
                  -Intère les plugins
                  -Paramètres l'environnement (versions de Java, encodage etc...)
                  -Tout le monde peut build l'app de LA MEME FACON, très pratique pour le travail d'équipe

    JOB 3 : 
        Objectif : Avoir une application qui affiche "Hello World" à l'adresse
                   localhost:8080.

        Question : Qu'est-ce qu'un contrôleur dans le contexte de Spring MVC ?

        Réponse : Un contrôleur dans Spring MVC est une classe Java annotée (@Controller ou @RestController) qui gère les requêtes HTTP entrantes.
                  Ses méthodes, mappées avec @GetMapping, @PostMapping, etc., reçoivent les données envoyées par l’utilisateur,
                  appellent le modèle ou les services pour les traiter, et renvoient une réponse (une vue HTML ou des données JSON).
                  Il joue donc le rôle d’intermédiaire entre la partie View (interface utilisateur) et la partie Model (données et logique métier).
    
    JOB 4 :
        Objectif : Afficher un message personnalisé défini dans application.yml sur
                   votre route.

        Question : Comment Spring permet-il l'injection de propriétés depuis des
                   fichiers de configuration ?
        
        Réponse : Grace à l'annotation @Value, Spring sait qu'il doit chercher dans les propriétés la valeure "${x.y}" que veut l'utilisateur.
                  application.properties (ou yml) permet entre autre de centraliser les propriétés de l'app, ce qui rends la gestion
                  et le debuggage plus pratique (pas besoin de fouiller 200 fichiers pour trouver une propriété).
    JOB 5 :
        Objectif : Afficher le message de salutation du profil dev par défaut.

        Question : Pourquoi serait-il utile d'avoir différents profils dans une
                   application Spring ?

        Réponse : Avoir plusieurs profils dans une application Spring est utile pour adapter la configuration à différents environnements (développement, test, production, etc.).
                  Cela permet de séparer clairement les paramètres (BDD, logs, sécurité, messages…) sans modifier le code source. Résultat : 
                  l’application est plus flexible, maintenable et prête pour différents contextes de déploiement.
    
    JOB 6 :
        Objectif : Découvrir le rechargement automatique des modifications grâce à
                DevTools.

        Question : En quoi la dépendance DevTools est-elle bénéfique pour le
                développement ?

        Réponse : La dépendance DevTools est très pratique pour le développement car elle permet d'automatiser le redémarrage de l'application direcement après des modifications.
                  Cela peut faire gagner un temps considérable, car là on ne pourra plus lancer/compiler l'application, tester les features, puis fermer, coder etc... là on a juste
                  à tester.