JOUR 1 :
    
    JOB 1 :
        Objectif : Avoir un projet Spring Boot prêt à être importé dans votre IDE.

        Question : Qu'est-ce que Spring Initializr et comment peut-il faciliter la
        création d'un nouveau projet Spring?
        
        Réponse : Spring Initializr est un outil intégré au web servant à faciliter l'
        initialization d'un projet Java Spring Boot.
        Il facilite la création d'un nouveau projet Spring en demandant à l'utilisateur uniquement
        les propriétés les plus importantes pour un projet Spring Boot et s'occupe de lui générer un .zip
        contenant tout ce que l'utilisateur a besoin, automatisant la configuration d'un projet, son squelette,
        augmentant considérablement la productivité des développeurs au sein d'un projet. Ils n'ont plus qu'à se 
        focaliser sur le code, et pas toutes les propriétés de Maven, Java, les dépendances etc...
    
    JOB 2 :
        Objectif : Comprendre la structure de base d'un projet Spring Boot.

        Question : Pourquoi le fichier pom.xml est-il crucial dans un projet Maven ?

        Réponse : Le fichier pom.xml est crucial dans un projet Maven car il est le fichier principal de celui-ci.
                  C'est lui qui :
                  -gère les dépendences
                  -dit à Maven comment compiler, tester, package, installer et déployer une application avec un cycle de vie prédéfini.
                  -Intère les plugins
                  -Paramètres l'environnement (versions de Java, encodage etc...)
                  -Tout le monde peut build l'app de LA MEME FACON, très pratique pour le travail d'équipe

    JOB 3 : 
        Objectif : Avoir une application qui affiche "Hello World" à l'adresse
                   localhost:8080.

        Question : Qu'est-ce qu'un contrôleur dans le contexte de Spring MVC ?

        Réponse : Un contrôleur dans Spring MVC est une classe Java annotée (@Controller ou @RestController) qui gère les requêtes HTTP entrantes.
                  Ses méthodes, mappées avec @GetMapping, @PostMapping, etc., reçoivent les données envoyées par l’utilisateur,
                  appellent le modèle ou les services pour les traiter, et renvoient une réponse (une vue HTML ou des données JSON).
                  Il joue donc le rôle d’intermédiaire entre la partie View (interface utilisateur) et la partie Model (données et logique métier).